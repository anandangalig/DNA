<?php
  class DNATestCase extends DrupalUnitTestCase
  {
    public static function getInfo()
    {
      return array(
        'name' => 'DNA Unit Test',
        'description' => 'Tests generate_other_half function of the DNA module.',
        'group' => 'Independent Project Tests',
      );
    }

     public function testGenerateOtherHalf()
     {
       //ARRANGE:
       $results_message = 'It works for 1 letter!';
       $input= 'a';
       //ACT:
       $full_helix = generate_other_half($input);
       //ASSERT:
       $expected_result = 'A-T';
       $this->assertEqual($full_helix, $expected_result, $results_message);

       //ARRANGE:
       $results_message = 'It works for 1 letter in reverse!';
       $input= 't';
       //ACT:
       $full_helix = generate_other_half($input);
       //ASSERT:
       $expected_result = 'T-A';
       $this->assertEqual($full_helix, $expected_result, $results_message);

       //ARRANGE:
       $results_message = 'It works for 2 letters!';
       $input= 'tc';
       //ACT:
       $full_helix = generate_other_half($input);
       //ASSERT:
       $expected_result = 'T-A, C-G';
       $this->assertEqual($full_helix, $expected_result, $results_message);

       //ARRANGE:
       $results_message = 'It works for 2 letters in reverse!';
       $input= 'ag';
       //ACT:
       $full_helix = generate_other_half($input);
       //ASSERT:
       $expected_result = 'A-T, G-C';
       $this->assertEqual($full_helix, $expected_result, $results_message);
     }
  }

//   class BakeryUserTests extends DrupalWebTestCase {
//
//     public static function getInfo() {
//         return array(
//             'name' => 'DNA Functional Test',
//             'description' => 'Front end functional test for custom module DNA.',
//             'group' => 'Independent Project Tests',
//         );
//     }
//
//     public function setUp() {
//         parent::setUp(array('dna')); //this enables the created module
//         $user = $this->drupalCreateAuthenticatedUser();//these 3 added later, and is partly arranging the environment for the testPageTest()
//         $this->drupalLogin($user);
//         $this->createTestingPage();
//     }
//
//
//     public function testPageTest() {
//       $this->drupalGet('node/1'); //alias can work too
//       $this->assertText('1, 2, 3!', 'The text on the page is correct.');
//     }
//
//
// // ============below functions can co-exist since they are creating separate environments that are used for different test functions.
//
//     public function drupalCreateAuthenticatedUser(array $permissions = array()) {
//         $roles = user_roles(); //grabs all user roles
//         $index = array_search('authenticated', $roles);//finds the index of suer role - authenticated
//         $user = $this->drupalCreateUser($permissions);//must be built in function
//         $user->roles[$index] = 'authenticated'; //this sets the role of created user to authenticated
//         return user_save($user); //saves the user and retruns it
//     }
//     public function createTestingPage() {
//         //$info = the information needed to create the basic page at the url `pagetest`.
//         $info = array();
//         $info['title'] = "Testing!";
//         $info["body[und][0][value]"] = "1, 2, 3!";
//
//         //save the new page
//         $this->drupalPost('node/add/page', $info, t('Save'));
//
//         //set new page to the correct path. We know this will be node/1 because we are starting from scratch.
//         $path['source'] = 'node/1';
//         $path['alias'] = 'pagetest';
//         path_save($path);
//     }
//
//
// }
